---
title: Tutorial (Production)
inMenu: true
lang: en
orderInfo: 4
---
h2. Using JRetrofit in production code

Let's return to the example on the front page.

So, you have an interface like this:

<pre class="example"><code>public interface Nameable {
    public String getName();
}
</code></pre>

and a class like this:

<pre class="example"><code>/**
 * Note that this class does not implement any interfaces.
 */
public class LegacyClass {
    public String getName() {
        return "foo!";
    }
}
</code></pre>

The simplest way to make an instance of <code>LegacyClass</code> implement <code>Nameable</code> is this:

<pre class="example"><code>LegacyClass legacy = new LegacyClass();
Nameable retrofittedLegacy = Retrofit.partial(legacy, Nameable.class);
</code></pre>

There is two different ways of retrofitting, *partial* and *complete*. In
the above example we have used &quot;partial&quot;. The difference between them is that if
you use *partial* retrofitting, your target object does not have to &quot;implement&quot;
the interface entirely. You can have only a subset of the methods of the interface on the target
object, and it will still work, as long as you use only the compatible methods. But if you use
*complete* retrofitting, your target object *must* &quot;implement&quot; all the methods
on the interface, otherwise the retrofitting operation fails. 

As an example, let's add a method to interface <code>Nameable</code>:

<pre class="example"><code>public interface Nameable {
    public String getName();
    public void setName(String name);
}
</code></pre>

Let's keep <code>LegacyClass</code> as is. As you see, it does not have any method
compatible with <code>public void setName(String name)</code>.

Now, *partial* retrofitting still works as long as you don't call <code>setName</code>:

<pre class="example"><code>LegacyClass legacy = new LegacyClass();
Nameable retrofittedLegacy = Retrofit.partial(legacy, Nameable.class);
retrofittedLegacy.getName(); // This is OK.
</code></pre>

But if you try to use <code>setName</code>, for which there is no compatible method,
you get an <code>UnsupportedOperationException</code>:

<pre class="failing_example"><code>LegacyClass legacy = new LegacyClass();
Nameable retrofittedLegacy = Retrofit.partial(legacy, Nameable.class);
retrofittedLegacy.setName("foo"); // THIS THROWS AN EXCEPTION!.
</code></pre>

If you had used *complete* retrofitting, the retrofitting operation itself
would have failed:

<pre class="failing_example"><code>LegacyClass legacy = new LegacyClass();
// THIS THROWS AN EXCEPTION!
Nameable retrofittedLegacy = Retrofit.complete(legacy, Nameable.class);
</code></pre>

You should use *complete* when you think that your target object &quot;implements&quot;
the interface entirely - then you have a useful fail-fast mechanism in case that it
does not.

You should use *partial* when you know that there are some methods missing, and don't
want to add them (you know you would never use them anyway).
