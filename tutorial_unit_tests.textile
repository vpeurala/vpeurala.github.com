---
title: Tutorial (Unit testing)
inMenu: true
lang: en
orderInfo: 5
---
h2. Using JRetrofit in unit tests (for dependency stubbing)

JRetrofit can be used for unit test dependency stubbing in a similar way to 
"Mocked":http://www.laughingpanda.org/mediawiki/index.php/Mocked. 

Let's suppose that you have a very simple utility class which executes a
<code>java.sql.PreparedStatement</code>:

<pre class="example"><code>import java.sql.PreparedStatement;
import java.sql.SQLException;

public class PreparedStatementExample {
    public boolean executePreparedStatement(PreparedStatement statement)
            throws SQLException {
        return statement.execute();
    }
}
</code></pre>

You would like to write an unit test for this (of course, if you practice TDD,
you would write the test first, but that is not in the scope of this tutorial).
Let's see... to call method <code>executePreparedStatement</code> you must have
some kind of a stub or a mock object for <code>java.sql.PreparedStatement</code>.
The only problem is that <code>java.sql.PreparedStatement</code> is a truly
bloated interface - you must implement 63 methods to get your stub to compile!
That is a terrible amount, especially as you really need only a single one of them
(<code>execute()</code>) to be able to test your own class.

You could make a mock object from <code>PreparedStatement</code> with 
"Mocked":http://www.laughingpanda.org/mediawiki/index.php/Mocked or
"EasyMock":http://www.easymock.org/. They are both good libraries. However,
if you just want a simple stub, you don't need full mocking power. You can 
use partial retrofitting to get the job done. Write a stub class which does *not*
implement <code>PreparedStatement</code>, but only &quot;implements&quot; the
single method you need (i.e. has a compatible method). Like this:

<pre class="example"><code>public class PreparedStatementStub {
    public boolean execute() {
        return true;
    }
}
</code></pre>

Now you can write a simple unit test which tests your class with this stub,
using partial retrofitting:

<pre class="example"><code>import java.sql.PreparedStatement;
import junit.framework.TestCase;
import org.jretrofit.Retrofit;

public class PreparedStatementExampleTest extends TestCase {
    public void testExecutePreparedStatementReturnsTrueOnSuccess()
            throws Exception {
        PreparedStatementStub stub = new PreparedStatementStub();
        PreparedStatement statement = Retrofit.partial(stub, PreparedStatement.class);
        assertTrue(new PreparedStatementExample()
                .executePreparedStatement(statement));
    }
}
</code></pre>

Run your test and enjoy the green bar!

Note that you *must* use *partial* retrofitting in cases like this. If you had used
*complete* retrofitting, JRetrofit would have thrown an exception, because 
<code>PreparedStatementStub</code> does not fully implement <code>PreparedStatement</code>!
